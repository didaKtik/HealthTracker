{"version":3,"sources":["app.js","foods.js","results.js","bar.js","food.js","list.js","result.js","transporter.js","plus.js","store.js"],"names":["app","isMobile","window","matchMedia","matches","touchEvent","reset","Backbone","trigger","$","on","e","target","this","preventDefault","Foods","Collection","extend","localStorage","LocalStorage","initialize","fetch","getCalories","length","reduce","memo","food","get","prototype","create","isDupe","any","_food","nameDupe","restDupe","call","attributes","foods","Results","query","appId","appKey","barView","getText","url","data","JSON","stringify","fields","filters","item_type","post","contentType","done","onSuccess","bind","fail","onError","response","results","treat","hits","map","hit","name","item_name","restaurant","brand_name","calories","nf_calories","BarView","View","el","events","keypress","input","mousedown","text","messaging","listenTo","message","focus","$el","removeClass","setText","setPlaceholder","attr","val","trim","onTextChange","currentText","triggerOnEnter","which","ENTER_KEY","blur","addClass","preventWhenMessaging","warning","warn","duration","state","getState","setTimeout","setState","FoodView","tagName","className","template","_","html","mousedown .destroy button","touchstart .destroy button","model","remove","render","destroy","ListView","collection","each","view","append","listView","ResultView","click","broadcastClick","TransporterView","middle","up","isUp","hasClass","transporterView","PlusController","active","addMode","touchstart","$plus","$text","setAddMode","unsetAddMode","renderResults","onNoResults","onResultClick","onMousedown","searchResults","storeController","activate","placeholder","hide","show","stopListening","result","created","StoreController","plusController","resetIfEmpty","renderFoods"],"mappings":"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","file":"uglified.js","sourcesContent":["/*global $ */\nvar app = app || {};\nvar ENTER_KEY = 13;\n\n$(function () {\n\t'use strict';\n\n\t/* The app architecture is the following: \n\t\t- 1 collection for the foods the user choosed\n\t\t- 1 collection for the food results obtained after a query\n\t\t- 1 view for a food item \n\t\t- 1 view for a result item \n\t\t- 2 controllers for the two main functionalities of the app:\n\t\t\t* plus.js for searching and adding foods\n\t\t\t* store.js for displaying and destroying user foods\n\t\t  These controllers are named controllers but are also extending\n\t\t  Backbone.View\n\t\t- 3 views shared by the 2 controllers:\n\t\t\t* list.js the list view\n\t\t\t* bar.js for the input bar\n\t\t\t* transporter.js for moving the input bar vertically \n\n\t   App philosophy:\n\t   To make the shared views easily reusable on not dependent on one \n\t   controller/functionality, the shared views are emitting events regarding\n\t   their states. This way, all the logic related to one particular \n\t   functionality can be gathered in the controllers. For instance when \n\t   the user types a letter in the input bar, the plus controller should \n\t   go in 'addMode' if it is active. This mode shift is not coded in bar.js\n\t   however. Instead, the bar view emits a 'nonEmpty' event and the plus\n\t   controller registers to it. \n\t*/\n\n\t// Kick things off by instantiating the two controllers\n\tapp.storeController = new app.StoreController();\n\tapp.plusController = new app.PlusController();\n});","/*global Backbone */\nvar app = app || {};\n\n(function () {\n\t'use strict';\n\n\t/* The collection of foods is backed by *localStorage* instead of a remote\n\tserver. */ \n\tvar Foods = Backbone.Collection.extend({\n\n\t\tlocalStorage: new Backbone.LocalStorage('foods'),\n\n\t\tinitialize: function () {\n\t\t\t// Foods are fetched from local storage\n\t\t\tthis.fetch();\n\t\t},\n\n\t\tgetCalories: function () {\n\t\t\tif (this.length) {\n\t\t\t\treturn this.reduce(function (memo, food) {\n\t\t\t\t\treturn memo + food.get('calories');\n\t\t\t\t}, 0);\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t});\n\n\t// Override create function to avoid duplicates\n\t// Derived from the following question: \n\t// http://stackoverflow.com/questions/6416958/how-to-make-backbone-js-collection-items-unique\n\tFoods.prototype.create = function (food) {\n\t    var isDupe = this.any(function(_food) {\n\t    \tvar nameDupe = _food.get('name') === food.get('name');\n\t    \tvar restDupe = _food.get('restaurant') === food.get('restaurant');\n\t        return nameDupe && restDupe;\n\t    });\n\n\t    // *food.attributes* should be passed instead of the model itself (*food*),\n\t    // otherwise the local storage remains 'results' and the food item is not\n\t    // properly stored in 'foods'.\n\t    return isDupe ? false : Backbone.Collection.prototype.create.call(this, food.attributes);\n\t};\n\n\tapp.foods = new Foods();\n})();","/*global Backbone, $ */\nvar app = app || {};\n\n(function () {\n\t'use strict';\n\n\t/* The collection of foods is backed by *localStorage* instead of\n\ta remote server. When a query is made, two events can be triggered:\n\t'noResults' in case of failure and 'reset' in case of success. These\n\tevents are listened to by the plus controller */\n\tvar Results = Backbone.Collection.extend({\n\n\t\t// A local storage is given only to avoid Backbone exceptions,\n\t\t// the results are never fetched again\n\t\tlocalStorage: new Backbone.LocalStorage('results'),\n\n\t\tquery: function () {\n\t\t\t// Keys obtained after registering to Nutritionix API\n\t\t\tvar appId = '3f4d31c4',\n\t\t\t\tappKey = '1db700e86d98a9f42590869fd586e09b',\n\t\t\t\tquery = app.barView.getText(),\n\t\t\t\turl = 'https://api.nutritionix.com/v1_1/search/';\n\n\t\t\t// The data field must be a JSON string\n\t\t\tvar data = JSON.stringify({\n\t\t\t\t'appId': appId,\n\t\t\t\t'appKey': appKey,\n\t\t\t\t'query': query,\n\t\t\t\t'fields': ['item_name', 'nf_calories', 'brand_name'],\n\t\t\t\t'filters': {\n\t\t\t\t\t'item_type': 1\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t$.post({\n\t\t\t\turl: url,\n\t\t\t\tdata: data,\n\t\t\t\tcontentType: 'application/json'\n\t\t\t}).done(this.onSuccess.bind(this))\n\t\t\t.fail(this.onError.bind(this));\n\t\t},\n\n\t\tonSuccess: function (response) {\n\t\t\tvar results = this.treat(response);\n\t\t\tif (results.length) {\n\t\t\t\tthis.reset(results);\n\t\t\t} else {\n\t\t\t\tthis.trigger('noResults');\n\t\t\t}\n\t\t},\n\n\t\ttreat: function (response) {\n\t\t\t// The desired information are extracted from the \n\t\t\t// json response\n\t\t\treturn response.hits.map(function (hit) {\n\t\t\t\tvar fields = hit.fields;\n\t\t\t\treturn {\n\t\t\t\t\tname: fields.item_name,\n\t\t\t\t\trestaurant: fields.brand_name,\n\t\t\t\t\tcalories: fields.nf_calories\n\t\t\t\t};\n\t\t\t});\n\t\t},\n\n\t\tonError: function (response) {\n\t\t\tthis.trigger('noResults');\n\t\t}\n\t});\n\n\tapp.results = new Results();\n})();","/*global Backbone, ENTER_KEY */\nvar app = app || {};\n\n(function () {\n\t'use strict';\n\n\t// The view responsible for the input bar\n\t// --------------------------------------\n\n\tvar BarView = Backbone.View.extend({\n\n\t\tel: '#bar-view',\n\n\t\tevents: {\n\t\t\t'keypress': 'triggerOnEnter',\n\t\t\t'input': 'onTextChange',\n\t\t\t'mousedown': 'preventWhenMessaging'\n\t\t},\n\n\t\ttext: '',\n\n\t\tmessaging: true,\n\n\t\tinitialize: function () {\n\t\t\tthis.listenTo(Backbone, 'resetAll', this.reset);\n\t\t\tthis.reset();\n\t\t},\n\n\t\treset: function () {\n\t\t\tthis.text = '';\n\t\t\tvar calories = app.foods.getCalories();\n\t\t\tthis.message('You eat ' + calories + ' calories!');\n\t\t},\n\n\t\tfocus: function () {\n\t\t\tthis.messaging = false;\n\t\t\tthis.$el.focus();\n\t\t\tthis.$el.removeClass('messaging');\n\t\t\tthis.setText('');\n\t\t},\n\n\t\tsetPlaceholder: function (text) {\n\t\t\tthis.$el.attr('placeholder', text);\n\t\t},\n\n\t\tgetText: function () {\n\t\t\treturn this.$el.val().trim();\n\t\t},\n\n\t\tsetText: function (text) {\n\t\t\tthis.$el.val(text);\n\t\t\tthis.text = text;\n\t\t},\n\n\t\tonTextChange: function (e) {\n\t\t\tvar currentText = this.getText(),\n\t\t\t\ttext = this.text;\n\t\t\tif (currentText === '' && text !== '') {\n\t\t\t\t// User emptied field\n\t\t\t\tthis.trigger('empty');\n\t\t\t}\n\t\t\tif (currentText !== '' && text === '') {\n\t\t\t\t// User typed first character\n\t\t\t\tthis.trigger('nonEmpty');\n\t\t\t}\n\t\t\t// Update text attribute\n\t\t\tthis.text = currentText;\n\t\t},\n\n\t\ttriggerOnEnter: function (e) {\n\t\t\tif (e.which === ENTER_KEY) {\n\t\t\t\tthis.trigger('enterKey');\n\t\t\t}\n\t\t},\n\n\t\tmessage: function (text) {\n\t\t\tthis.messaging = true;\n\t\t\tthis.$el.blur();\n\t\t\tthis.$el.addClass('messaging');\n\t\t\tthis.setText(text);\n\t\t},\n\n\t\tpreventWhenMessaging: function (e) {\n\t\t\t// Disabling has to be done on mousedown (physical event),\n\t\t\t// not on click (abstract event)\n\t\t\tif (this.messaging || this.warning) {\n\t\t\t\te.preventDefault();\n\t\t\t}\n\t\t},\n\n\t\t// warn is given memory so that at the end of a warning the bar\n\t\t// returns to the state it add before the warning begins\n\t\twarn: function (text, duration) {\n\t\t\tvar duration = duration || 1500;\n\t\t\tvar state = this.getState();\n\t\t\tthis.message(text);\n\t\t\tthis.$el.removeClass('messaging');\n\t\t\tthis.$el.addClass('warning');\n\t\t\tsetTimeout(function () {\n\t\t\t\tthis.$el.removeClass('warning');\n\t\t\t\tthis.setState(state);\n\t\t\t}.bind(this), duration);\n\t\t},\n\n\t\tgetState: function () {\n\t\t\tvar state = {};\n\t\t\tstate.messaging = this.messaging;\n\t\t\tstate.text = this.getText();\n\t\t\treturn state;\n\t\t},\n\n\t\tsetState: function (state) {\n\t\t\tif (state.messaging) {\n\t\t\t\tthis.message(state.text);\n\t\t\t} else {\n\t\t\t\tthis.focus();\n\t\t\t\tthis.setText(state.text);\n\t\t\t}\n\t\t}\n\n\t});\n\n\tapp.barView = new BarView();\n\n})();","/*global Backbone, _ */\nvar app = app || {};\n\n(function () {\n\t'use strict';\n\n\t// The view responsible for a single food item\n\t// -------------------------------------------\n\n\tapp.FoodView = Backbone.View.extend({\n\n\t\ttagName: 'tr',\n\n\t\tclassName: 'food',\n\n\t\ttemplate: _.template($('#food-template').html()),\n\n\t\tevents: {\n\t\t\t'mousedown .destroy button' : 'destroy',\n\t\t\t'touchstart .destroy button' : 'destroy'\n\t\t},\n\n\t\tinitialize: function () {\n\t\t\tthis.listenTo(this.model, 'destroy', this.remove);\n\t\t},\n\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( this.model.attributes ) );\n\t\t\treturn this;\n\t\t},\n\n\t\tdestroy: function () {\n\t\t\tthis.model.destroy();\n\t\t}\n\n\t});\n})();","/*global Backbone */\nvar app = app || {};\n\n(function () {\n\t'use strict';\n\n\t// The view responsible for the list of foods\n\t// ------------------------------------------\n\n\tvar ListView = Backbone.View.extend({\n\n\t\tel: '#list-view',\n\n\t\trender: function (collection) {\n\t\t\tthis.$el.html('');\n\n\t\t\tvar View = collection === app.foods ? 'FoodView' : 'ResultView';\n\t\t\tcollection.each(function (food) {\n\t\t\t\tvar view = new app[View]({ model: food });\n\t\t\t\tthis.$el.append(view.render().el);\n\t\t\t}, this);\n\t\t}\n\n\t});\n\n\tapp.listView = new ListView();\n\n})();","/*global Backbone, _ */\nvar app = app || {};\n\n(function () {\n\t'use strict';\n\n\t// The view responsible for a single result item\n\t// ---------------------------------------------\n\n\tapp.ResultView = Backbone.View.extend({\n\n\t\ttagName: 'tr',\n\n\t\tclassName: 'result',\n\n\t\ttemplate: _.template($('#result-template').html()),\n\n\t\tevents: {\n\t\t\t'click': 'broadcastClick'\n\t\t},\n\n\t\trender: function () {\n\t\t\tthis.$el.html( this.template( this.model.attributes ) );\n\t\t\treturn this;\n\t\t},\n\n\t\tbroadcastClick: function () {\n\t\t\tBackbone.trigger('resultClick', this.model);\n\t\t}\n\n\t});\n\n})();","/*global Backbone */\nvar app = app || {};\n\n(function () {\n\t'use strict';\n\n\t// The view responsible for moving the menu vertically\n\t// ---------------------------------------------------\n\n\tvar TransporterView = Backbone.View.extend({\n\n\t\tel: '#transporter-view',\n\n\t\tinitialize: function () {\n\t\t\tthis.listenTo(Backbone, 'resetAll', this.middle);\n\t\t},\n\n\t\tup: function () {\n\t\t\tthis.$el.removeClass('middle');\n\t\t\tthis.$el.addClass('up');\n\t\t},\n\n\t\tmiddle: function () {\n\t\t\tthis.$el.removeClass('up');\n\t\t\tthis.$el.addClass('middle');\n\t\t},\n\n\t\tisUp: function () {\n\t\t\treturn this.$el.hasClass('up');\n\t\t}\n\n\t});\n\n\tapp.transporterView = new TransporterView();\n\n})();","/*global Backbone */\nvar app = app || {};\n\n(function () {\n\t'use strict';\n\n\t// The controller responsible for the add functionality\n\t// ----------------------------------------------------\n\n\tapp.PlusController = Backbone.View.extend({\n\n\t\tel: '#plus-controller',\n\n\t\tactive: false,\n\n\t\taddMode: false,\n\n\t\tevents: {\n\t\t\t'touchstart': 'onMousedown',\n\t\t\t'mousedown': 'onMousedown'\n\t\t},\n\n\t\tinitialize: function () {\n\t\t\tthis.$plus = this.$('.bars');\n\t\t\tthis.$text = this.$('.text');\n\n\t\t\tthis.listenTo(Backbone, 'resetAll', this.reset);\n\t\t\tthis.listenTo(app.barView, 'nonEmpty', this.setAddMode);\n\t\t\tthis.listenTo(app.barView, 'empty', this.unsetAddMode);\n\t\t\tthis.listenTo(app.results, 'reset', this.renderResults);\n\t\t\tthis.listenTo(app.results, 'noResults', this.onNoResults);\n\t\t\tthis.listenTo(Backbone, 'resultClick', this.onResultClick);\n\t\t},\n\n\t\tonMousedown: function (e) {\n\t\t\te.preventDefault();\n\t\t\tif (!this.active) {\n\t\t\t\t// Not active\n\t\t\t\tif (app.storeController.active) {\n\t\t\t\t\tapp.reset();\n\t\t\t\t\tthis.activate();\n\t\t\t\t} else {\n\t\t\t\t\tthis.activate();\n\t\t\t\t}\n\t\t\t} else if (!this.addMode) {\n\t\t\t\t// active but not addMode\n\t\t\t\tapp.reset();\n\t\t\t} else {\n\t\t\t\t// active and addMode\n\t\t\t\tthis.searchResults();\n\t\t\t}\n\t\t},\n\n\t\tactivate: function () {\n\t\t\tthis.active = true;\n\t\t\tapp.barView.focus();\n\t\t\tvar placeholder = app.transporterView.isUp() ? 'Make a new search' : 'Search for a food';\n\t\t\tapp.barView.setPlaceholder(placeholder);\n\t\t},\n\n\t\treset: function () {\n\t\t\tthis.unsetAddMode();\n\t\t\tthis.active = false;\n\t\t},\n\n\t\tsetAddMode: function () {\n\t\t\tif (this.active) {\n\t\t\t\tthis.addMode = true;\n\t\t\t\tthis.$plus.hide();\n\t\t\t\tthis.$text.show();\n\t\t\t\tthis.listenTo(app.barView, 'enterKey', this.searchResults);\n\t\t\t}\n\t\t},\n\n\t\tunsetAddMode: function () {\n\t\t\tif (this.active) {\n\t\t\t\tthis.addMode = false;\n\t\t\t\tthis.$text.hide();\n\t\t\t\tthis.$plus.show();\n\t\t\t\tthis.stopListening(app.barView, 'enterKey');\n\t\t\t}\n\t\t},\n\n\t\tsearchResults: function () {\n\t\t\tapp.results.query(app.results);\n\t\t\tthis.reset();\n\t\t\tapp.barView.message('...');\n\t\t},\n\n\t\tonNoResults: function () {\n\t\t\tapp.reset();\n\t\t\tapp.barView.warn('No results found !');\n\t\t},\n\n\t\trenderResults: function (results) {\n\t\t\tapp.transporterView.up();\n\t\t\tapp.listView.render(results);\n\t\t\tapp.barView.message('Do you eat one of these ?');\n\t\t},\n\n\t\tonResultClick: function (result) {\n\t\t\tvar created = app.foods.create(result);\n\t\t\tapp.reset();\n\t\t\tif (created) {\n\t\t\t\tapp.barView.warn('Food stored !');\n\t\t\t} else {\n\t\t\t\tapp.barView.warn('You already eat this one !');\n\t\t\t}\n\t\t}\n\n\t});\n\n})();","/*global Backbone */\nvar app = app || {};\n\n(function () {\n\t'use strict';\n\n\t// The controller responsible for the add functionality\n\t// ----------------------------------------------------\n\n\tapp.StoreController = Backbone.View.extend({\n\n\t\tel: '#store-controller',\n\n\t\tactive: false,\n\n\t\tevents: {\n\t\t\t'touchstart': 'onMousedown',\n\t\t\t'mousedown': 'onMousedown'\n\t\t},\n\n\t\tonMousedown: function (e) {\n\t\t\te.preventDefault();\n\t\t\tif (!this.active) {\n\t\t\t\tif (app.plusController.active) {\n\t\t\t\t\tapp.reset();\n\t\t\t\t\tthis.activate();\n\t\t\t\t} else {\n\t\t\t\t\tthis.activate();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tapp.reset();\n\t\t\t}\n\t\t},\n\n\t\tinitialize: function () {\n\t\t\tthis.listenTo(Backbone, 'resetAll', this.reset);\n\t\t\tthis.listenTo(app.foods, 'remove', this.resetIfEmpty);\n\t\t},\n\n\t\tactivate: function () {\n\t\t\tif (app.foods.length) {\n\t\t\t\tthis.active = true;\n\t\t\t\tthis.renderFoods();\n\t\t\t} else {\n\t\t\t\tapp.barView.warn('You have no foods yet !');\n\t\t\t}\n\t\t},\n\n\t\trenderFoods: function () {\n\t\t\tapp.listView.render(app.foods);\n\t\t\tapp.barView.message('Here are your foods');\n\t\t\tapp.transporterView.up();\n\t\t},\n\n\t\treset: function () {\n\t\t\tthis.active = false;\n\t\t},\n\n\t\tresetIfEmpty: function () {\n\t\t\tif (!app.foods.length) {\n\t\t\t\tapp.reset();\n\t\t\t\tapp.barView.warn('No more foods !');\n\t\t\t}\n\t\t}\n\n\t});\n\n})();"],"sourceRoot":"/source/"}